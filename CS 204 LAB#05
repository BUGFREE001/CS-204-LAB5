/******************************************************************************

 YIJUN LIU

 LAB#05    Week 5

 Problem:

 1. Find multiplication of two matrices. 

*******************************************************************************/

#include <stdio.h>

int main()
{

    int a,b,i=0,j=0,k=0,fst[100][100],secnd[100][100],sum[100][100];

    printf("Enter 2-dimensional array size: ");
    scanf("%d%d",&a,&b);
    printf("Enter numbers for each element in two arrays: ");

    for(i=0;i<a;i++){
        for(j=0;j<b;j++){
            scanf("%d",&fst[i][j]);
        }
    }
    for(i=0;i<b;i++){
        for(j=0;j<a;j++){
            scanf("%d",&secnd[i][j]);
        }
    }
    
    // multiplication and save the results into the matrix sum
    // k is for locating the index for these two original marixes

    for(i=0;i<a;i++){
        for(j=0;j<a;j++){
            for(k=0;k<b;k++){
                sum[i][j]+=fst[i][k]*secnd[k][j];
            }
        }
    }
    
    printf("\nResult after multiplication of two arrays: \n");

    // print out the sum[][]

    for(i=0;i<a;i++){
        for(j=0;j<a;j++){
            printf("%d ",sum[i][j]);
        }
    printf("\n");
    } 
    
    
    return 0;
}






/******************************************************************************

 YIJUN LIU

 LAB#05    Week 5

 Problem:

 2. Swap two numbers by pointer  

*******************************************************************************/

#include <stdio.h>

int main()
{
    int a,b,temp,*p,*ptr;
    printf("Enter two numbers a & b:  ");
    scanf("%d%d",&a,&b);
    p=&a;
    ptr=&b;
    
    temp= *p;
    *p=*ptr;
    *ptr=temp;
    
    printf("After swapping by pointer, a = %d, b= %d ",a,b);
    
    return 0;
}





/******************************************************************************

 YIJUN LIU

 LAB#05    Week 5

 Problem:

 3. Study built-in functions "gets()", "puts() ","getchar()", "putchar()" in C language about string & char process. And then write program to input and output of a string   

*******************************************************************************/
#include <stdio.h>

int main()

{
    char str[100];

    printf("Enter any string: ");
    gets(str);
    printf("Result: ");
    puts(str);

    return 0;
}



#include <stdio.h>

int main()
{
    int chr,counter=0;
    printf("Enter any string: ");
    
    while((chr=getchar())!=EOF){
        if(counter == 0){
          printf("Result:");
          counter++;
        }
        putchar(chr);
    }
    return 0;
}






/******************************************************************************

 YIJUN LIU

 LAB#05    Week 5

 Problem:

 4. Find factorial of a number using recursion   

*******************************************************************************/

#include<stdio.h>

long int multiplyNumbers(int n);

int main() {
    int n;
    printf("Enter a positive integer: ");
    scanf("%d",&n);
    printf("Factorial of %d = %ld", n, multiplyNumbers(n));
    return 0;
}

long int multiplyNumbers(int n) {
    if (n>=1)
        return n*multiplyNumbers(n-1);
    else
        return 1;
}





/******************************************************************************

 YIJUN LIU

 LAB#05    Week 5

 Problem:

 5. Study functions "strcpy()" and "strrev()" in C language, and then write a program to check if a string is palindrome or not   

*******************************************************************************/


////////////////////////////////////  ------Method 1


#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>
#include <math.h>
int main()
{
    char str[100],rev[100];
    printf("Enter a string: ");
    gets(str);
    strcpy(rev,str);
    if(strcmp(str,strrev(rev))==0)
    {
        printf("Result: yes, it is a palindrome string");
    }
    else
        printf("Result: not a palindrome string ");

    return 0;
}



////////////////////////////////////  ------Method 2



#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>
#include <math.h>
int main()
{
    char str[1000],rev[1000];
    int d;
    printf("Enter a string: ");
    gets(str);
  
    strcpy(rev,str);
    d=strcmp(str,strrev(rev));

    //printf("\n%d\n",d);

    if(d==0){
        printf("Result: yes, it is a palindrome string");}
    else
        printf("Result: not a palindrome string");
    //if(strcmp(str,strrev(str))==0)
    //{
        //printf("Result: yes, it is a palindrome string");
    //}
    //else
        //printf("Result: not a palindrome string ");

    return 0;
}






/******************************************************************************

 YIJUN LIU

 LAB#05    Week 5

 Problem:

 6. Merging one-dimensional array - excluding repeating element    

*******************************************************************************/

#include <stdio.h>

int main()

{

    int n,m;

    //declaring arrays with max limit

    int ar1[50],ar2[50],res[100];

    //inputs
    printf("Enter the size of 1sr array: ");
    scanf("%d",&n);
    printf("Enter each Element :");
    for(int i=0;i<n;i++)
        scanf("%d",&ar1[i]);
        printf("Enter the size of 2nd array:");
    scanf("%d",&m);
    printf("Enter each Element :");
    for(int i=0;i<m;i++)
        scanf("%d",&ar2[i]);

    //size of the resultant array

    int c=m+n;

    //copying data
    
    for(int i=0;i<n;i++)
        res[i]=ar1[i];
    for(int i=0;i<m;i++)
        res[n+i]=ar2[i];
	
    //deleting duplicate elements
    for(int i=0; i<c; i++)
    {
        for(int j=i+1; j<c; j++)
        {
            /* if duplicate */
            if(res[i] == res[j])
            {
                /* Delete the current duplicate element */
                for(int k=j; k<c; k++)
                {
                    res[k] = res[k + 1];
                }
                /* decrement the size due to deleted element */
                c--;
                /* check again for jth element */
                j--;
            }
        }
    }

    printf("Result of Merging : ");
    for(int i=0;i<c;i++)
        printf("%d ",res[i]);

    return 0;

}






--------------------------------------------------------------------------------------------------------------------------------


#7

#include <stdio.h>

//find factorial
int fact(int n)
{
   if(n==0)
   return(1);
   int prod = 1;
   for (int i=1;i<=n;i++)
{
   prod*=i;
}
return(prod);
}

//find binomial coefficient \binom{n}{k}
int binom(int n,int k){
   return(fact(n)/fact(k)/fact(n-k));
}

int main() {
int n;
printf("Enter the order of binomial power expression: ");
scanf("%d",&n);
for (int i=0;i<=n;i++)
{
for (int j=0;j<=i;j++)
   printf("%d ",binom(i,j));
   printf("\n");
   }
  
return 0;
}


--------------------------------------------------------------------------------------------------------------------------------


#8

#include <stdio.h>
 
 void sort ();
 
 int main ()
 {   
	 int s;
	 printf ("Enter size of the array: ");
	 scanf("%d", &s);
  
	 int a[s];
	 printf("Enter numbers for each element: ");
	 for (int i=0; i<s; i++){
		 scanf("%d", &a[i]);
	 }
  
	 sort (a, s);
 
  printf ("Results of removing duplicate: ");
 
	 for (int i=0; i<s-1; i++){
	  if (a[i]<a[i+1]){
		  printf ("%d ", a[i]);
	  }
    if (i==s-2 && a[i]<=a[i+1]){
      printf("%d", a[i+1]);
    }
  }
	 return 0;
 }

 void sort (int a[], int s){
	 for (int i=1; i<s; i++){
		 for (int j=0; j<s-i; j++){
			int temp;
			if (a[j]>a[j+1]){
				temp = a[j];
				a[j] = a[j+1];
				a[j+1] = temp;
			}		 
		 }
	 }
 } 


--------------------------------------------------------------------------------------------------------------------------------



#9

#include<stdio.h>
#include<math.h>
#include<time.h>
#include<stdlib.h>
 
int N = 20;
int A[20];
 
void swap(int dex1, int dex2) {
    int temp = A[dex1];
    A[dex1] = A[dex2];
    A[dex2] = temp;
}
 
int partition(int start, int end) {
    int i = start + 1;
    int j = i;
    int pivot = start;
    for (; i < end; i++) {
        if (A[i] < A[pivot]) {
            swap(i, j);
            j++;
        }
    }
    if (j <= end)
        swap(pivot, (j - 1));
 
    return j - 1;
}
 
void quick_sort(int start, int end, int K) {
    int part;
    if (start < end) {
        part = partition(start, end);
        if (part == K - 1)
            printf("kth smallest element : %d ", A[part]);
        if (part > K - 1)
            quick_sort(start, part, K);
        else
            quick_sort(part + 1, end, K);
    }
    return;
}
 
int main(int argc, char **argv) {
    int i;
    time_t seconds;
    time(&seconds);
    srand((unsigned int) seconds);
 
    for (i = 0; i < N; i++)
        A[i] = rand() % (1000 - 1 + 1) + 1;
 
    printf("The original sequence is:  ");
    for (i = 0; i < N; i++)
        printf("%d ", A[i]);
 
    printf("\nEnter the Kth smallest you want to find: ");
    int k;
    scanf("%d", &k);
    quick_sort(0, N, k);
}
 
 
 ----------------------------------------------------------------------------------------------------------------------------
 
 
 #10
 
#include <stdio.h>
#include <math.h>

float cal();
int main()
{
    int i, s;
    printf("Enter size of the array: ");
    scanf("%d", &s);

    float a[s];
    printf("Enter numbers for each element: ");
    for(i=0; i < s; ++i){
      scanf("%f", &a[i]);
    }  

    printf("Standard Deviation = %.8f", cal(a, s));
    return 0;
}
float cal(float a[], int s)
{
    float sum = 0.0, mean, sd = 0.0;
    int i;
    for(i=0; i<s; ++i){
        sum += a[i];
    }
    mean = sum/s;
    for(i=0; i<s; ++i)
        sd += pow(a[i] - mean, 2);
    return sqrt(sd/s);
}


